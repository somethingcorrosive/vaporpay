// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 ^0.8.30;

// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol

// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)

/**
 * @dev Interface of the ERC-20 standard as defined in the ERC.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

// src/VaporPay.sol

contract VaporPay {
    struct Commitment {
        address depositor;
        address token; // zero means ETH
        uint256 amount;
        uint256 expiry;
        bool refundable;
    }

    mapping(bytes32 => Commitment) public commitments;
    address public immutable fallbackCollector;

    event Deposited(
        bytes32 indexed commitment,
        address indexed depositor,
        address token,
        uint256 amount,
        uint256 expiry,
        bool refundable
    );

    event Redeemed(bytes32 indexed commitment, address indexed to, address token, uint256 amount);
    event Refunded(bytes32 indexed commitment, address indexed to, address token, uint256 amount);

    constructor(address _fallbackCollector) {
        require(_fallbackCollector != address(0), "Invalid fallback");
        fallbackCollector = _fallbackCollector;
    }

    // --------- DEPOSITS ---------

    function depositETH(bytes32 commitment, uint256 expiry, bool refundable) external payable {
        require(msg.value > 0, "No ETH sent");
        require(expiry > block.timestamp, "Expiry must be in future");
        require(commitments[commitment].amount == 0, "Commitment already used");

        commitments[commitment] = Commitment({
            depositor: msg.sender,
            token: address(0),
            amount: msg.value,
            expiry: expiry,
            refundable: refundable
        });

        emit Deposited(commitment, msg.sender, address(0), msg.value, expiry, refundable);
    }

    function depositERC20(
        bytes32 commitment,
        address token,
        uint256 amount,
        uint256 expiry,
        bool refundable
    ) external {
        require(amount > 0, "No tokens sent");
        require(expiry > block.timestamp, "Expiry must be in future");
        require(commitments[commitment].amount == 0, "Commitment already used");

        IERC20(token).transferFrom(msg.sender, address(this), amount);

        commitments[commitment] = Commitment({
            depositor: msg.sender,
            token: token,
            amount: amount,
            expiry: expiry,
            refundable: refundable
        });

        emit Deposited(commitment, msg.sender, token, amount, expiry, refundable);
    }

    // --------- REDEEM ---------

    function redeem(bytes32 secret, bytes32 salt, address to) external {
        bytes32 commitment = keccak256(abi.encodePacked(secret, salt));
        Commitment storage c = commitments[commitment];

        require(c.amount > 0, "Already redeemed/refunded");
        require(block.timestamp <= c.expiry, "Expired");

        uint256 amount = c.amount;
        address token = c.token;
        c.amount = 0;

        _transfer(token, to, amount);

        emit Redeemed(commitment, to, token, amount);
    }

    // --------- REFUND ---------

    function refund(bytes32 secret, bytes32 salt) external {
        bytes32 commitment = keccak256(abi.encodePacked(secret, salt));
        Commitment storage c = commitments[commitment];

        require(c.amount > 0, "Nothing to refund");
        require(block.timestamp > c.expiry, "Not expired");

        uint256 amount = c.amount;
        address token = c.token;
        bool refundable = c.refundable;
        c.amount = 0;

        address recipient = refundable ? c.depositor : fallbackCollector;
        _transfer(token, recipient, amount);

        emit Refunded(commitment, recipient, token, amount);
    }

    // --------- INTERNAL ---------

    function _transfer(address token, address to, uint256 amount) internal {
        if (token == address(0)) {
            (bool ok, ) = to.call{value: amount}("");
            require(ok, "ETH transfer failed");
        } else {
            require(IERC20(token).transfer(to, amount), "ERC20 transfer failed");
        }
    }
}

